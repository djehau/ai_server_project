#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ VTuber AI
"""
import sys
import argparse
import subprocess
import time
from pathlib import Path

sys.path.append(str(Path(__file__).parent))
from config.microservices import SERVICES

def start_service(service_name: str, background: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    if service_name not in SERVICES:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service_name}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {', '.join(SERVICES.keys())}")
        return False
    
    service_config = SERVICES[service_name]
    base_dir = Path(__file__).parent
    script_path = base_dir / service_config["process_name"]
    
    if not script_path.exists():
        print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Python
    venv_path = base_dir / "venvs" / service_name
    python_path = venv_path / "Scripts" / "python.exe"
    
    if not python_path.exists():
        print(f"‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {venv_path}")
        print("   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π Python")
        python_path = "python"
    
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: {service_name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {service_config['description']}")
        print(f"   –ü–æ—Ä—Ç: {service_config['port']}")
        print(f"   –°–∫—Ä–∏–ø—Ç: {script_path}")
        print(f"   Python: {python_path}")
        
        if background:
            print("   –†–µ–∂–∏–º: —Ñ–æ–Ω–æ–≤—ã–π")
            # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(
                [str(python_path), str(script_path)],
                cwd=str(base_dir),
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if sys.platform == 'win32' else 0
            )
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (PID: {process.pid})")
            return True
        else:
            print("   –†–µ–∂–∏–º: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π")
            print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("-" * 50)
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
            result = subprocess.run(
                [str(python_path), str(script_path)],
                cwd=str(base_dir)
            )
            
            if result.returncode == 0:
                print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
            
            return result.returncode == 0
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def list_services():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    print()
    
    for name, config in SERVICES.items():
        print(f"  {name}")
        print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
        print(f"    –ü–æ—Ä—Ç: {config['port']}")
        print(f"    –°–∫—Ä–∏–ø—Ç: {config['process_name']}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ VTuber AI")
    parser.add_argument("service", nargs="?", help="–ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--list", "-l", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
    parser.add_argument("--background", "-b", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    args = parser.parse_args()
    
    if args.list:
        list_services()
        return
    
    if not args.service:
        print("üéØ VTuber AI - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python start_service.py [–∏–º—è_—Å–µ—Ä–≤–∏—Å–∞] [--background]")
        print("  python start_service.py --list")
        print()
        list_services()
        return
    
    success = start_service(args.service, args.background)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
