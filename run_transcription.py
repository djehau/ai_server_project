#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è PyCharm
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
"""
import sys
import os
from pathlib import Path
import argparse
import tkinter as tk
from tkinter import filedialog, messagebox, ttk

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
sys.path.append(str(Path(__file__).parent / "transcription_tools"))

try:
    from transcribe_stream import StreamTranscriber
except ImportError:
    print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("pip install openai-whisper torch torchaudio")
    sys.exit(1)


class TranscriptionGUI:
    """–ü—Ä–æ—Å—Ç–æ–π GUI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("VTuber AI - –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ")
        self.root.geometry("600x400")
        
        self.audio_file = tk.StringVar()
        self.model_size = tk.StringVar(value="medium")
        self.language = tk.StringVar(value="auto")
        self.output_path = tk.StringVar()
        
        self.create_widgets()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(pady=10)
        
        ttk.Label(title_frame, text="üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–æ–≤", 
                 font=("Arial", 16, "bold")).pack()
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_frame = ttk.LabelFrame(self.root, text="–í—ã–±–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞", padding=10)
        file_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Entry(file_frame, textvariable=self.audio_file, width=50).pack(side="left", fill="x", expand=True)
        ttk.Button(file_frame, text="–û–±–∑–æ—Ä...", command=self.select_file).pack(side="right", padx=(5, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(self.root, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", padding=10)
        settings_frame.pack(fill="x", padx=10, pady=5)
        
        # –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
        ttk.Label(settings_frame, text="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:").grid(row=0, column=0, sticky="w", pady=2)
        model_combo = ttk.Combobox(settings_frame, textvariable=self.model_size, 
                                  values=["tiny", "base", "small", "medium", "large"],
                                  width=15)
        model_combo.grid(row=0, column=1, sticky="w", padx=(10, 0), pady=2)
        
        # –Ø–∑—ã–∫
        ttk.Label(settings_frame, text="–Ø–∑—ã–∫:").grid(row=1, column=0, sticky="w", pady=2)
        lang_combo = ttk.Combobox(settings_frame, textvariable=self.language,
                                 values=["auto", "ru", "en", "de", "fr", "es", "ja", "zh"],
                                 width=15)
        lang_combo.grid(row=1, column=1, sticky="w", padx=(10, 0), pady=2)
        
        # –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_frame = ttk.LabelFrame(self.root, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", padding=10)
        output_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Entry(output_frame, textvariable=self.output_path, width=50).pack(side="left", fill="x", expand=True)
        ttk.Button(output_frame, text="–í—ã–±—Ä–∞—Ç—å...", command=self.select_output).pack(side="right", padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.root)
        control_frame.pack(pady=20)
        
        ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é", 
                  command=self.start_transcription, style="Accent.TButton").pack(side="left", padx=5)
        ttk.Button(control_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", 
                  command=self.root.quit).pack(side="left", padx=5)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(self.root, text="–ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", padding=10)
        log_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.log_text = tk.Text(log_frame, height=8, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(fill="x", padx=10, pady=(0, 10))
        
    def select_file(self):
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
            filetypes=[
                ("–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã", "*.mp3 *.wav *.flac *.m4a *.ogg *.wma"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filename:
            self.audio_file.set(filename)
            
    def select_output(self):
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫",
            defaultextension=".json",
            filetypes=[
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if filename:
            self.output_path.set(filename)
            
    def log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def start_transcription(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        if not self.audio_file.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!")
            return
            
        if not os.path.exists(self.audio_file.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        try:
            self.progress.start()
            self.log("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            model_size = self.model_size.get()
            language = self.language.get() if self.language.get() != "auto" else None
            audio_path = self.audio_file.get()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if self.output_path.get():
                output_path = self.output_path.get()
            else:
                filename = Path(audio_path).stem + '_transcript.json'
                output_dir = Path(__file__).parent / "transcription_tools" / "data"
                output_dir.mkdir(exist_ok=True)
                output_path = str(output_dir / filename)
            
            self.log(f"üìÑ –§–∞–π–ª: {Path(audio_path).name}")
            self.log(f"üß† –ú–æ–¥–µ–ª—å: {model_size}")
            self.log(f"üåç –Ø–∑—ã–∫: {language or '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}")
            self.log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä
            self.log("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
            transcriber = StreamTranscriber(model_size=model_size)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
            self.log("üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
            transcription = transcriber.transcribe_audio(audio_path, language=language)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            transcriber.save_transcription(transcription, output_path)
            transcriber.save_text_only(transcription, output_path)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.log("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.log(f"üìä –Ø–∑—ã–∫: {transcription.get('language', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
            self.log(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcription.get('duration', 0):.2f} —Å–µ–∫")
            self.log(f"üìù –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(transcription.get('segments', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            text = transcription.get('text', '')
            preview = text[:100] + '...' if len(text) > 100 else text
            self.log(f"üëÅÔ∏è –ü—Ä–µ–≤—å—é: {preview}")
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{output_path}")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
        finally:
            self.progress.stop()


def run_cli():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ - CLI —Ä–µ–∂–∏–º')
    parser.add_argument('audio_path', nargs='?', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É')
    parser.add_argument('--model', '-m', default='medium', 
                       choices=['tiny', 'base', 'small', 'medium', 'large'],
                       help='–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper')
    parser.add_argument('--language', '-l', help='–ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, etc.)')
    parser.add_argument('--output', '-o', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    parser.add_argument('--gui', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å')
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω --gui –∏–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º GUI
    if args.gui or not args.audio_path:
        print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        root = tk.Tk()
        app = TranscriptionGUI(root)
        root.mainloop()
        return
    
    # CLI —Ä–µ–∂–∏–º
    try:
        transcriber = StreamTranscriber(model_size=args.model)
        transcription = transcriber.transcribe_audio(args.audio_path, language=args.language)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if args.output:
            output_path = args.output
        else:
            filename = Path(args.audio_path).stem + '_transcript.json'
            output_dir = Path(__file__).parent / "transcription_tools" / "data"
            output_dir.mkdir(exist_ok=True)
            output_path = str(output_dir / filename)
        
        transcriber.save_transcription(transcription, output_path)
        transcriber.save_text_only(transcription, output_path)
        transcriber.print_summary(transcription)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéôÔ∏è VTuber AI - –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import whisper
        import torch
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("\nüîß –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("pip install openai-whisper torch torchaudio")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    if torch.cuda.is_available():
        print(f"üöÄ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        print(f"üíæ VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    else:
        print("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU (–º–µ–¥–ª–µ–Ω–Ω–æ)")
    
    run_cli()


if __name__ == "__main__":
    main()
