"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
"""
import subprocess
import sys
import os
from pathlib import Path

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True,
            cwd=cwd
        )
        print(f"‚úÖ {command}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {command}")
        print(f"   {e.stderr}")
        return False

def setup_service_environment(service_name, requirements_file):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {service_name}...")
    
    base_dir = Path(__file__).parent
    venv_dir = base_dir / "venvs" / service_name
    venv_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not (venv_dir / "Scripts" / "python.exe").exists():
        print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        if not run_command(f'python -m venv "{venv_dir}"'):
            return False
    
    # –ü—É—Ç—å –∫ Python 3.10 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    python310_path = Path(os.environ['USERPROFILE']) / "AppData" / "Local" / "Programs" / "Python" / "Python310" / "python.exe"
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å Python 3.10
    if not (venv_dir / "Scripts" / "python.exe").exists():
        print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        if not run_command(f'"{python310_path}" -m venv "{venv_dir}"'):
            return False
    
    # –ü—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    pip_path = venv_dir / "Scripts" / "pip.exe"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    run_command(f'"{pip_path}" install --upgrade pip')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    requirements_path = base_dir / requirements_file
    if requirements_path.exists():
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ {requirements_file}...")
        if service_name == "llm_service":
            # –î–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞ —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å CUDA
            print(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å CUDA...")
            run_command(f'"{pip_path}" install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118')
        
        run_command(f'"{pip_path}" install -r "{requirements_path}"')
    else:
        print(f"   ‚ö†Ô∏è  –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è {service_name} –≥–æ—Ç–æ–≤–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VTuber AI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
    try:
        result = subprocess.run([sys.executable, "--version"], capture_output=True, text=True)
        print(f"Python –≤–µ—Ä—Å–∏—è: {result.stdout.strip()}")
    except:
        print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    services = [
        ("llm_service", "requirements_llm.txt"),
        ("voice_service", "requirements_voice.txt"), 
        ("avatar_service", "requirements_avatar.txt"),
        ("monitor_service", "requirements_monitor.txt"),
        ("obs_service", "requirements_obs.txt"),
        ("main_server", "requirements_main.txt")
    ]
    
    success_count = 0
    for service_name, requirements_file in services:
        if setup_service_environment(service_name, requirements_file):
            success_count += 1
    
    print(f"\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    if success_count == len(services):
        print("\nüî• –í—Å–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
        print("   python process_manager.py")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
