#!/usr/bin/env python3
"""
Twitch Chat Downloader - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ VOD —Å —Ç–∞–π–º–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ Twitch API
"""
import asyncio
import json
import os
import sys
import argparse
import re
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Optional
import logging

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from dotenv import load_dotenv
from twitchAPI.twitch import Twitch
from twitchAPI.helper import first
from twitchAPI.object.api import Video
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TwitchChatDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ —Å Twitch VOD"""
    
    def __init__(self, client_id: str, client_secret: str):
        self.client_id = client_id
        self.client_secret = client_secret
        self.twitch = None
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "chat_downloader.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitch API"""
        self.logger.info("üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitch API...")
        try:
            self.twitch = await Twitch(self.client_id, self.client_secret)
            self.logger.info("‚úÖ Twitch API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
            raise
    
    def extract_video_id(self, url_or_id: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ URL –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∫–∞–∫ –µ—Å—Ç—å"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Twitch URL
        patterns = [
            r'twitch\.tv/videos/(\d+)',
            r'twitch\.tv/\w+/v/(\d+)',
            r'(\d+)$'  # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url_or_id)
            if match:
                return match.group(1)
        
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Video ID –∏–∑: {url_or_id}")
    
    async def get_video_info(self, video_id: str) -> Optional[Video]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        self.logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ {video_id}...")
        try:
            video = await first(self.twitch.get_videos(video_ids=[video_id]))
            if video:
                self.logger.info(f"üìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: '{video.title}' ({video.duration})")
                self.logger.info(f"üìÖ –î–∞—Ç–∞: {video.created_at}")
                self.logger.info(f"üë§ –°—Ç—Ä–∏–º–µ—Ä: {video.user_name}")
                return video
            else:
                self.logger.error(f"‚ùå –í–∏–¥–µ–æ —Å ID {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def download_chat_comments(self, video_id: str, output_file: str = None) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è VOD
        
        –í–ê–ñ–ù–û: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ Twitch API –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º 
        –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º —á–∞—Ç–∞ –¥–ª—è VOD. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ Twitch.
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API.
        """
        self.logger.info(f"üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video = await self.get_video_info(video_id)
        if not video:
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        chat_data = {
            "video_info": {
                "id": video.id,
                "title": video.title,
                "description": video.description,
                "created_at": video.created_at.isoformat(),
                "duration": video.duration,
                "language": video.language,
                "user_name": video.user_name,
                "user_id": video.user_id,
                "view_count": video.view_count,
                "url": video.url
            },
            "chat_messages": [],
            "metadata": {
                "downloaded_at": datetime.now(timezone.utc).isoformat(),
                "downloader_version": "1.0.0",
                "api_limitation": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Twitch API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º —á–∞—Ç–∞ VOD"
            }
        }
        
        # –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.logger.warning("‚ö†Ô∏è  –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï TWITCH API:")
        self.logger.warning("üìµ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Twitch API –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É VOD")
        self.logger.warning("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ VOD –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        self.logger.warning("   1. TwitchDownloaderCLI")
        self.logger.warning("   2. yt-dlp")
        self.logger.warning("   3. Twitch Chat Downloader (—Ç—Ä–µ—Ç—å–∏ —Ä–µ—à–µ–Ω–∏—è)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –º–æ–∂–µ–º
        output_dir = Path("output")
        output_dir.mkdir(exist_ok=True)
        
        if not output_file:
            safe_title = re.sub(r'[<>:"/\\|?*]', '_', video.title[:50])
            output_file = output_dir / f"{video_id}_{safe_title}_info.json"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(chat_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}")
        return True
    
    async def get_user_info(self, username: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}...")
        try:
            user = await first(self.twitch.get_users(logins=[username]))
            if user:
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.display_name} (ID: {user.id})")
                return user
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None
    
    async def list_recent_videos(self, username: str, limit: int = 10):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self.get_user_info(username)
        if not user:
            return []
        
        self.logger.info(f"üìπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")
        try:
            videos = []
            async for video in self.twitch.get_videos(user_id=user.id, first=limit):
                videos.append({
                    'id': video.id,
                    'title': video.title,
                    'created_at': video.created_at.isoformat(),
                    'duration': video.duration,
                    'view_count': video.view_count,
                    'url': video.url
                })
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ")
            return videos
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return []
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.twitch:
            await self.twitch.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Twitch Chat Downloader - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VOD',
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python chat_downloader.py --video https://twitch.tv/videos/1234567890
  python chat_downloader.py --video 1234567890 --output my_chat.json
  python chat_downloader.py --user streamer_name --list-videos 5
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--video', '-v', help='URL –∏–ª–∏ ID –≤–∏–¥–µ–æ –Ω–∞ Twitch')
    parser.add_argument('--user', '-u', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    parser.add_argument('--list-videos', '-l', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    parser.add_argument('--output', '-o', help='–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    client_id = os.getenv('TWITCH_CLIENT_ID')
    client_secret = os.getenv('TWITCH_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ Twitch")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print("   TWITCH_CLIENT_ID=–≤–∞—à_client_id")
        print("   TWITCH_CLIENT_SECRET=–≤–∞—à_client_secret")
        print("üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á–∏ –Ω–∞: https://dev.twitch.tv/console/apps")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = TwitchChatDownloader(client_id, client_secret)
    
    try:
        await downloader.initialize()
        
        if args.video:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_id = downloader.extract_video_id(args.video)
            await downloader.download_chat_comments(video_id, args.output)
            
        elif args.user:
            if args.list_videos:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
                videos = await downloader.list_recent_videos(args.user, args.list_videos)
                if videos:
                    print(f"\nüìπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(videos)} –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args.user}:")
                    for i, video in enumerate(videos, 1):
                        print(f"{i:2}. [{video['id']}] {video['title']}")
                        print(f"    üïê {video['created_at']} | ‚è±Ô∏è {video['duration']} | üëÅÔ∏è {video['view_count']}")
                        print(f"    üîó {video['url']}\n")
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await downloader.get_user_info(args.user)
        else:
            print("‚ùì –£–∫–∞–∂–∏—Ç–µ --video –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ --user –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            parser.print_help()
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await downloader.close()

if __name__ == "__main__":
    print("üéÆ Twitch Chat Downloader")
    print("=" * 50)
    asyncio.run(main())
