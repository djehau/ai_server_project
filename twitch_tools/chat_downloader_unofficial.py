#!/usr/bin/env python3
"""
–ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Twitch Chat Downloader
‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞!
‚ö†Ô∏è –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å ToS Twitch –∏ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!
‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫!
"""
import asyncio
import json
import re
import argparse
from datetime import datetime
from pathlib import Path
import aiohttp
import logging
from typing import List, Dict, Optional

class UnofficialTwitchChatDownloader:
    """
    –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –∑–∞–≥—Ä—É–∑—á–∏–∫ —á–∞—Ç–∞ Twitch
    
    –í–ù–ò–ú–ê–ù–ò–ï: 
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API
    - –ú–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å Terms of Service Twitch
    - –ú–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
    - –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self.session = None
        self.setup_logging()
        
        # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï
        self.logger.warning("‚ö†Ô∏è" * 20)
        self.logger.warning("–í–ù–ò–ú–ê–ù–ò–ï: –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –∑–∞–≥—Ä—É–∑—á–∏–∫ —á–∞—Ç–∞!")
        self.logger.warning("–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å ToS Twitch –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å!")
        self.logger.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TwitchDownloaderCLI!")
        self.logger.warning("‚ö†Ô∏è" * 20)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "unofficial_chat_downloader.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        connector = aiohttp.TCPConnector(limit=10)
        timeout = aiohttp.ClientTimeout(total=30)
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json',
        }
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers=headers
        )
    
    def extract_video_id(self, url_or_id: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ URL"""
        patterns = [
            r'twitch\\.tv/videos/(\\d+)',
            r'(\\d+)$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url_or_id)
            if match:
                return match.group(1)
        
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Video ID –∏–∑: {url_or_id}")
    
    async def get_video_info_unofficial(self, video_id: str) -> Optional[Dict]:
        """
        –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API!
        """
        self.logger.warning(f"‚ö†Ô∏è –ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ {video_id}")
        
        try:
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π URL –∫ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!)
            url = f"https://api.twitch.tv/helix/videos?id={video_id}"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
            headers = {
                'Client-ID': 'kimne78kx3ncx6brgo4mv6wki5h1ko',  # –ü—É–±–ª–∏—á–Ω—ã–π Client-ID
                'Accept': 'application/vnd.twitchtv.v5+json'
            }
            
            async with self.session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                    return None
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None
    
    async def download_chat_unofficial(self, video_id: str) -> List[Dict]:
        """
        –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞
        ‚ö†Ô∏è –ö–†–ê–ô–ù–ï –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!
        """
        self.logger.warning(f"‚ö†Ô∏è –ü–û–ü–´–¢–ö–ê –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞ {video_id}")
        self.logger.warning("‚ö†Ô∏è –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨!")
        self.logger.warning("‚ö†Ô∏è Twitch –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —á–∞—Ç–∞")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)
        await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        
        self.logger.error("‚ùå –ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ VOD –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        self.logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TwitchDownloaderCLI –∏–ª–∏ yt-dlp")
        
        return []
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

def show_alternatives():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
    print("\\nüîß –†–ê–ë–û–ß–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–∞—Ç–∞ Twitch VOD:")
    print("=" * 60)
    
    print("\\n1Ô∏è‚É£ TwitchDownloaderCLI (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: winget install TwitchDownloaderCLI")
    print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("   TwitchDownloaderCLI chatdownload -u https://twitch.tv/videos/ID -o chat.json")
    print("   TwitchDownloaderCLI chatrender -i chat.json -o chat.txt")
    
    print("\\n2Ô∏è‚É£ yt-dlp")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: winget install yt-dlp")
    print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("   yt-dlp --write-comments https://twitch.tv/videos/ID")
    
    print("\\n3Ô∏è‚É£ Twitch Chat Downloader (Python)")
    print("   pip install chat-downloader")
    print("   chat_downloader https://twitch.tv/videos/ID")
    
    print("\\n4Ô∏è‚É£ Browser Extensions")
    print("   - Twitch Chat Download (Chrome/Firefox)")
    print("   - Chat Replay (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)")
    
    print("\\n‚ùå –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –º–µ—Ç–æ–¥—ã:")
    print("   - –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Twitch API (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)")
    print("   - Scraping —á–µ—Ä–µ–∑ web-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞—â–∏—â–µ–Ω–æ)")
    print("   - –°—Ç–∞—Ä—ã–µ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API (–∑–∞–∫—Ä—ã—Ç—ã)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Twitch Chat Downloader (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!)',
        epilog="–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤!",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--video', '-v', help='URL –∏–ª–∏ ID –≤–∏–¥–µ–æ –Ω–∞ Twitch')
    parser.add_argument('--alternatives', '-a', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã')
    
    args = parser.parse_args()
    
    if args.alternatives or not args.video:
        show_alternatives()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = UnofficialTwitchChatDownloader()
    
    try:
        await downloader.initialize()
        
        video_id = downloader.extract_video_id(args.video)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤—Ä—è–¥ –ª–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
        info = await downloader.get_video_info_unofficial(video_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —á–∞—Ç (—Ç–æ—á–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
        chat = await downloader.download_chat_unofficial(video_id)
        
        print("\\n" + "="*50)
        print("üö´ –ö–ê–ö –û–ñ–ò–î–ê–õ–û–°–¨ - –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        show_alternatives()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        show_alternatives()
    finally:
        await downloader.close()

if __name__ == "__main__":
    print("‚ö†Ô∏è  –ù–ï–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô Twitch Chat Downloader")
    print("‚ö†Ô∏è  (–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!)")
    print("=" * 50)
    asyncio.run(main())
