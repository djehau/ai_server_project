#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ Twitch —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
–°–æ–∑–¥–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–∫–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""
import json
import argparse
import cv2
import numpy as np
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import logging

class ScreenChatSynchronizer:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
    
    def __init__(self):
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def load_chat_data(self, chat_file: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏–∑ JSON"""
        self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é —á–∞—Ç –∏–∑ {chat_file}")
        
        with open(chat_file, 'r', encoding='utf-8') as f:
            chat_data = json.load(f)
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text_messages = []
        for msg in chat_data:
            if msg.get('message_type') == 'text_message' and msg.get('message'):
                text_messages.append({
                    'time_seconds': msg['time_in_seconds'],
                    'time_text': msg['time_text'],
                    'user': msg['author']['display_name'],
                    'message': msg['message'],
                    'user_badges': [badge['name'] for badge in msg['author'].get('badges', [])],
                    'timestamp': msg['timestamp']
                })
        
        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(text_messages)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return sorted(text_messages, key=lambda x: x['time_seconds'])
    
    def extract_video_frames(self, video_path: str, output_dir: str, fps: float = 1.0) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º FPS
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
            fps: –ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ (1.0 = –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        """
        self.logger.info(f"üé¨ –ò–∑–≤–ª–µ–∫–∞—é –∫–∞–¥—Ä—ã –∏–∑ {video_path}")
        
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True, parents=True)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        video_fps = cap.get(cv2.CAP_PROP_FPS)
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        duration = total_frames / video_fps
        
        self.logger.info(f"üìä –í–∏–¥–µ–æ: {video_fps:.1f}fps, {duration:.1f}—Å, {total_frames} –∫–∞–¥—Ä–æ–≤")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —à–∞–≥ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        frame_step = int(video_fps / fps)
        
        extracted_frames = []
        frame_num = 0
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
                
            if frame_num % frame_step == 0:
                time_seconds = frame_num / video_fps
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä
                frame_filename = f"frame_{int(time_seconds):06d}s.jpg"
                frame_path = output_path / frame_filename
                cv2.imwrite(str(frame_path), frame)
                
                extracted_frames.append({
                    'time_seconds': time_seconds,
                    'frame_path': str(frame_path),
                    'frame_number': frame_num
                })
                
                if len(extracted_frames) % 100 == 0:
                    self.logger.info(f"‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_frames)} –∫–∞–¥—Ä–æ–≤...")
            
            frame_num += 1
        
        cap.release()
        self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_frames)} –∫–∞–¥—Ä–æ–≤")
        return extracted_frames
    
    def detect_scene_changes(self, frames: List[Dict], threshold: float = 0.3) -> List[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–º–µ–Ω—É —Å—Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∫–∞–¥—Ä–æ–≤
        
        Args:
            frames: –°–ø–∏—Å–æ–∫ –∫–∞–¥—Ä–æ–≤ —Å –ø—É—Ç—è–º–∏
            threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å—Ü–µ–Ω—ã (0.0-1.0)
        """
        self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–º–µ–Ω—É —Å—Ü–µ–Ω (–ø–æ—Ä–æ–≥: {threshold})")
        
        scene_changes = []
        prev_frame = None
        
        for i, frame_info in enumerate(frames):
            current_frame = cv2.imread(frame_info['frame_path'], cv2.IMREAD_GRAYSCALE)
            if current_frame is None:
                continue
                
            if prev_frame is not None:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–æ–≤
                diff = cv2.absdiff(prev_frame, current_frame)
                diff_normalized = np.mean(diff) / 255.0
                
                if diff_normalized > threshold:
                    scene_changes.append({
                        'time_seconds': frame_info['time_seconds'],
                        'frame_path': frame_info['frame_path'],
                        'change_intensity': diff_normalized,
                        'type': 'scene_change'
                    })
            
            prev_frame = current_frame
        
        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(scene_changes)} —Å–º–µ–Ω —Å—Ü–µ–Ω")
        return scene_changes
    
    def group_chat_by_events(self, chat_messages: List[Dict], events: List[Dict], 
                           window_before: int = 10, window_after: int = 30) -> List[Dict]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        
        Args:
            chat_messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            events: –°–æ–±—ã—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ (—Å–º–µ–Ω—ã —Å—Ü–µ–Ω)
            window_before: –°–µ–∫—É–Ω–¥ –¥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            window_after: –°–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.logger.info(f"üîÑ –ì—Ä—É–ø–ø–∏—Ä—É—é —á–∞—Ç –≤–æ–∫—Ä—É–≥ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        grouped_data = []
        
        for event in events:
            event_time = event['time_seconds']
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∫–Ω–µ —Å–æ–±—ã—Ç–∏—è
            relevant_messages = []
            for msg in chat_messages:
                msg_time = msg['time_seconds']
                if (event_time - window_before) <= msg_time <= (event_time + window_after):
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
                    msg_copy = msg.copy()
                    msg_copy['relative_time'] = msg_time - event_time
                    relevant_messages.append(msg_copy)
            
            if relevant_messages:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                grouped_data.append({
                    'event': event,
                    'messages': relevant_messages,
                    'messages_before': [m for m in relevant_messages if m['relative_time'] < 0],
                    'messages_after': [m for m in relevant_messages if m['relative_time'] >= 0],
                    'total_messages': len(relevant_messages),
                    'analysis_window': {'before': window_before, 'after': window_after}
                })
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(grouped_data)} –≥—Ä—É–ø–ø —Å–æ–±—ã—Ç–∏–µ-—á–∞—Ç")
        return grouped_data
    
    def analyze_reaction_patterns(self, grouped_data: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ–∞–∫—Ü–∏–π –≤ —á–∞—Ç–µ"""
        self.logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ–∞–∫—Ü–∏–π")
        
        analysis = {
            'total_events': len(grouped_data),
            'average_messages_per_event': 0,
            'common_reaction_words': {},
            'reaction_timing': {'immediate': 0, 'delayed': 0},
            'user_participation': {}
        }
        
        all_words = []
        total_messages = 0
        
        for group in grouped_data:
            total_messages += len(group['messages'])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ —Ä–µ–∞–∫—Ü–∏—è—Ö
            for msg in group['messages_after']:  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
                words = msg['message'].lower().split()
                all_words.extend(words)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
                if abs(msg['relative_time']) <= 5:  # –í —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
                    analysis['reaction_timing']['immediate'] += 1
                else:
                    analysis['reaction_timing']['delayed'] += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user = msg['user']
                if user not in analysis['user_participation']:
                    analysis['user_participation'][user] = 0
                analysis['user_participation'][user] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤
        from collections import Counter
        word_counts = Counter(all_words)
        analysis['common_reaction_words'] = dict(word_counts.most_common(20))
        analysis['average_messages_per_event'] = total_messages / len(grouped_data) if grouped_data else 0
        
        return analysis
    
    def save_training_dataset(self, grouped_data: List[Dict], analysis: Dict, output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞—Ç–∞—Å–µ—Ç –≤ {output_file}")
        
        dataset = {
            'metadata': {
                'created_at': datetime.now().isoformat(),
                'total_events': len(grouped_data),
                'description': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–∫–∏'
            },
            'analysis': analysis,
            'training_data': grouped_data
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(dataset, f, ensure_ascii=False, indent=2)
        
        self.logger.info("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ Twitch —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ',
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python screen_chat_sync.py --chat chat.json --video stream.mp4 --output dataset.json
  python screen_chat_sync.py --chat chat.json --video stream.mp4 --fps 0.5 --threshold 0.4
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--chat', required=True, help='–§–∞–π–ª —Å —á–∞—Ç–æ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    parser.add_argument('--video', required=True, help='–í–∏–¥–µ–æ —Ñ–∞–π–ª —Å—Ç—Ä–∏–º–∞')
    parser.add_argument('--output', default='training_dataset.json', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞')
    parser.add_argument('--fps', type=float, default=1.0, help='–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0)')
    parser.add_argument('--threshold', type=float, default=0.3, help='–ü–æ—Ä–æ–≥ —Å–º–µ–Ω—ã —Å—Ü–µ–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.3)')
    parser.add_argument('--window-before', type=int, default=10, help='–°–µ–∫—É–Ω–¥ –¥–æ —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--window-after', type=int, default=30, help='–°–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--frames-dir', default='frames', help='–ü–∞–ø–∫–∞ –¥–ª—è –∫–∞–¥—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: frames)')
    
    args = parser.parse_args()
    
    print("üé¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å–æ —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
    print("=" * 50)
    
    try:
        synchronizer = ScreenChatSynchronizer()
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç
        chat_messages = synchronizer.load_chat_data(args.chat)
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ
        frames = synchronizer.extract_video_frames(args.video, args.frames_dir, args.fps)
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—ã —Å—Ü–µ–Ω
        scene_changes = synchronizer.detect_scene_changes(frames, args.threshold)
        
        # 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç –≤–æ–∫—Ä—É–≥ —Å–æ–±—ã—Ç–∏–π
        grouped_data = synchronizer.group_chat_by_events(
            chat_messages, scene_changes, 
            args.window_before, args.window_after
        )
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        analysis = synchronizer.analyze_reaction_patterns(grouped_data)
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        synchronizer.save_training_dataset(grouped_data, analysis, args.output)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°–æ–±—ã—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {len(scene_changes)}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(chat_messages)}")
        print(f"   –°–æ–±—ã—Ç–∏—è —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏: {len(grouped_data)}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {analysis['average_messages_per_event']:.1f}")
        print(f"   –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: {analysis['reaction_timing']['immediate']}")
        print(f"   –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: {analysis['reaction_timing']['delayed']}")
        
        print(f"\nüéâ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {args.output}")
        
    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
