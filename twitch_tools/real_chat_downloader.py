#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ô Twitch Chat Downloader
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É chat-downloader
"""
import argparse
import subprocess
import sys
import os
from pathlib import Path
import json
import re
from datetime import datetime

class RealTwitchChatDownloader:
    """–†–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —á–∞—Ç–∞ Twitch"""
    
    def __init__(self):
        self.chat_downloader_path = self._find_chat_downloader()
        
    def _find_chat_downloader(self):
        """–ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ chat_downloader"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—É—â–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        venv_path = Path(__file__).parent.parent / "venvs" / "twitch_service" / "Scripts"
        
        possible_paths = [
            venv_path / "chat_downloader.exe",
            venv_path / "chat_downloader",
            "chat_downloader"  # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
        ]
        
        for path in possible_paths:
            try:
                if isinstance(path, Path) and path.exists():
                    return str(path)
                elif isinstance(path, str):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                    result = subprocess.run([path, "--help"], 
                                          capture_output=True, 
                                          timeout=5)
                    if result.returncode == 0:
                        return path
            except:
                continue
                
        raise FileNotFoundError("chat_downloader –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install chat-downloader")
    
    def extract_video_id(self, url_or_id):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ URL –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å"""
        patterns = [
            r'twitch\.tv/videos/(\d+)',
            r'(\d+)$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url_or_id)
            if match:
                return match.group(1)
        
        return url_or_id
    
    def download_chat(self, video_url_or_id, output_file=None, start_time=None, end_time=None, format_type="json"):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —á–∞—Ç VOD
        
        Args:
            video_url_or_id: URL –∏–ª–∏ ID –≤–∏–¥–µ–æ
            output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ hh:mm:ss)
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ hh:mm:ss) 
            format_type: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (json, csv, text)
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        video_id = self.extract_video_id(video_url_or_id)
        if not video_url_or_id.startswith("http"):
            video_url = f"https://www.twitch.tv/videos/{video_id}"
        else:
            video_url = video_url_or_id
            
        print(f"üìπ Video URL: {video_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [self.chat_downloader_path, video_url]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if output_file:
            cmd.extend(["--output", output_file])
            
        if start_time:
            cmd.extend(["--start_time", str(start_time)])
            
        if end_time:
            cmd.extend(["--end_time", str(end_time)])
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω–µ json
        if format_type != "json":
            if format_type == "text":
                cmd.extend(["--format", "{timestamp} {author[display_name]}: {message}"])
            elif format_type == "csv":
                cmd.extend(["--format", "{timestamp},{author[display_name]},{message}"])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã
        cmd.extend([
            "--message_groups", "messages",  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "--sort_keys",
            "--indent", "2"
        ])
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {output_file or '–∫–æ–Ω—Å–æ–ª—å'}")
        print("‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã VOD...")
        print()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            result = subprocess.run(cmd, check=True, text=True, 
                                  capture_output=not bool(output_file))
            
            if output_file:
                print(f"‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
                if Path(output_file).exists():
                    file_size = Path(output_file).stat().st_size
                    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} KB")
                    
                    if output_file.endswith('.json'):
                        try:
                            with open(output_file, 'r', encoding='utf-8') as f:
                                data = json.load(f)
                                if isinstance(data, list):
                                    print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(data)}")
                        except:
                            pass
            else:
                print("‚úÖ –ß–∞—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å")
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}")
            print(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - VOD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
            print(f"   - –ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ VOD") 
            print(f"   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≤–∏–¥–µ–æ")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
            
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ô Twitch Chat Downloader',
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python real_chat_downloader.py https://twitch.tv/videos/1234567890
  python real_chat_downloader.py 1234567890 -o chat.json
  python real_chat_downloader.py 1234567890 -o chat.txt --format text --start 300 --end 900
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('video', help='URL –∏–ª–∏ ID –≤–∏–¥–µ–æ Twitch VOD')
    parser.add_argument('-o', '--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞')
    parser.add_argument('-s', '--start', help='–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ hh:mm:ss)')
    parser.add_argument('-e', '--end', help='–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ hh:mm:ss)')
    parser.add_argument('--format', choices=['json', 'text', 'csv'], 
                       default='json', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)')
    
    args = parser.parse_args()
    
    print("üí¨ –†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ô Twitch Chat Downloader")
    print("=" * 50)
    
    try:
        downloader = RealTwitchChatDownloader()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not args.output and args.format in ['json', 'text', 'csv']:
            video_id = downloader.extract_video_id(args.video)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            ext = args.format if args.format != 'text' else 'txt'
            args.output = f"chat_{video_id}_{timestamp}.{ext}"
            print(f"üìÅ –§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è—é –≤: {args.output}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.output:
            output_path = Path(args.output)
            if not output_path.is_absolute():
                output_dir = Path("output")
                output_dir.mkdir(exist_ok=True)
                args.output = str(output_dir / args.output)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —á–∞—Ç
        success = downloader.download_chat(
            args.video,
            args.output, 
            args.start,
            args.end,
            args.format
        )
        
        if success:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
        else:
            print("\nüíî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —á–∞—Ç")
            
    except FileNotFoundError as e:
        print(f"‚ùå {e}")
        print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   pip install chat-downloader")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
