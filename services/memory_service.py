"""
–ú–æ–¥—É–ª—å –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è VTuber AI
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ Discord ID
"""

import json
import sqlite3
import os
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class MemoryService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
    
    def __init__(self, db_path: str = "../memory.db"):
        self.db_path = Path(db_path).resolve()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –±–∞–∑—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        self.db_path.parent.mkdir(exist_ok=True)
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    discord_id TEXT NOT NULL,
                    timestamp DATETIME NOT NULL,
                    role TEXT NOT NULL,
                    message TEXT NOT NULL,
                    emotion TEXT,
                    context TEXT,
                    session_id TEXT
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_profiles (
                    discord_id TEXT PRIMARY KEY,
                    username TEXT,
                    first_seen DATETIME,
                    last_seen DATETIME,
                    total_messages INTEGER DEFAULT 0,
                    preferences TEXT,
                    notes TEXT
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_discord_id ON conversations(discord_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON conversations(timestamp)')
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_message(self, discord_id: str, role: str, message: str, 
                    emotion: str = None, context: str = None, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            timestamp = datetime.now().isoformat()
            
            cursor.execute('''
                INSERT INTO conversations (discord_id, timestamp, role, message, emotion, context, session_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (discord_id, timestamp, role, message, emotion, context, session_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.update_user_profile(cursor, discord_id)
            
            conn.commit()
            conn.close()
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {discord_id}: {message[:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def update_user_profile(self, cursor, discord_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            cursor.execute('SELECT discord_id FROM user_profiles WHERE discord_id = ?', (discord_id,))
            exists = cursor.fetchone()
            
            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                cursor.execute('''
                    UPDATE user_profiles 
                    SET last_seen = ?, total_messages = total_messages + 1
                    WHERE discord_id = ?
                ''', (datetime.now().isoformat(), discord_id))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                cursor.execute('''
                    INSERT INTO user_profiles (discord_id, first_seen, last_seen, total_messages)
                    VALUES (?, ?, ?, 1)
                ''', (discord_id, datetime.now().isoformat(), datetime.now().isoformat()))
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    def get_conversation_history(self, discord_id: str, limit: int = 20) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT timestamp, role, message, emotion, context, session_id
                FROM conversations 
                WHERE discord_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            ''', (discord_id, limit))
            
            rows = cursor.fetchall()
            conn.close()
            
            history = []
            for row in rows:
                history.append({
                    'timestamp': row[0],
                    'role': row[1],
                    'message': row[2],
                    'emotion': row[3],
                    'context': row[4],
                    'session_id': row[5]
                })
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            return list(reversed(history))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def get_user_profile(self, discord_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT discord_id, username, first_seen, last_seen, total_messages, preferences, notes
                FROM user_profiles 
                WHERE discord_id = ?
            ''', (discord_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return {
                    'discord_id': row[0],
                    'username': row[1],
                    'first_seen': row[2],
                    'last_seen': row[3],
                    'total_messages': row[4],
                    'preferences': json.loads(row[5]) if row[5] else {},
                    'notes': row[6]
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    def update_user_preferences(self, discord_id: str, preferences: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE user_profiles 
                SET preferences = ?
                WHERE discord_id = ?
            ''', (json.dumps(preferences, ensure_ascii=False), discord_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è {discord_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
    
    def get_context_for_ai(self, discord_id: str, current_message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = self.get_user_profile(discord_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            history = self.get_conversation_history(discord_id, limit=10)
            
            context_parts = []
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if profile:
                context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
                context_parts.append(f"–û–±—â–∞–ª–∏—Å—è —Å: {profile.get('first_seen', '–ù–µ–¥–∞–≤–Ω–æ')}")
                context_parts.append(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {profile.get('total_messages', 0)}")
                
                if profile.get('preferences'):
                    prefs = profile['preferences']
                    context_parts.append(f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {prefs}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if history:
                context_parts.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for msg in history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "–ù–µ–π—Ä–æ-—á–∞–Ω"
                    context_parts.append(f"{role}: {msg['message']}")
            
            return "\n".join(context_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {discord_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    def save_conversation(self, discord_id: str, messages: List[Dict[str, Any]], session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª—ã–π –¥–∏–∞–ª–æ–≥"""
        try:
            for msg in messages:
                self.save_message(
                    discord_id=discord_id,
                    role=msg.get('role', 'user'),
                    message=msg.get('message', ''),
                    emotion=msg.get('emotion'),
                    context=msg.get('context'),
                    session_id=session_id
                )
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∏–∞–ª–æ–≥: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('SELECT COUNT(*) FROM conversations')
            total_messages = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT COUNT(DISTINCT discord_id) FROM conversations')
            unique_users = cursor.fetchone()[0]
            
            # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute('''
                SELECT discord_id, COUNT(*) as msg_count
                FROM conversations 
                GROUP BY discord_id 
                ORDER BY msg_count DESC 
                LIMIT 5
            ''')
            active_users = cursor.fetchall()
            
            conn.close()
            
            return {
                'total_messages': total_messages,
                'unique_users': unique_users,
                'active_users': [{'discord_id': u[0], 'messages': u[1]} for u in active_users],
                'db_size': os.path.getsize(str(self.db_path)) if self.db_path.exists() else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def get_all_users(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()

            cursor.execute('''
                SELECT discord_id, username, last_seen, total_messages
                FROM user_profiles
                ORDER BY last_seen DESC
            ''')

            rows = cursor.fetchall()
            conn.close()

            users = []
            for row in rows:
                users.append({
                    'discord_id': row[0],
                    'username': row[1],
                    'last_seen': row[2],
                    'total_messages': row[3]
                })

            return users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def delete_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM conversations WHERE id = ?', (message_id,))
            deleted = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            if deleted:
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return deleted
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def edit_message(self, message_id: int, new_message: str, new_emotion: str = None) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            if new_emotion is not None:
                cursor.execute(
                    'UPDATE conversations SET message = ?, emotion = ? WHERE id = ?',
                    (new_message, new_emotion, message_id)
                )
            else:
                cursor.execute(
                    'UPDATE conversations SET message = ? WHERE id = ?',
                    (new_message, message_id)
                )
            
            updated = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            if updated:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return updated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def delete_user_data(self, discord_id: str) -> dict:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute('DELETE FROM conversations WHERE discord_id = ?', (discord_id,))
            deleted_messages = cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            cursor.execute('DELETE FROM user_profiles WHERE discord_id = ?', (discord_id,))
            deleted_profile = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_id}: {deleted_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ—Ñ–∏–ª—å: {deleted_profile}")
            
            return {
                'deleted_messages': deleted_messages,
                'deleted_profile': deleted_profile,
                'success': deleted_messages > 0 or deleted_profile
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'success': False, 'error': str(e)}
    
    def get_conversation_with_ids(self, discord_id: str, limit: int = 20) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, timestamp, role, message, emotion, context, session_id
                FROM conversations 
                WHERE discord_id = ? 
                ORDER BY timestamp DESC 
                LIMIT ?
            ''', (discord_id, limit))
            
            rows = cursor.fetchall()
            conn.close()
            
            history = []
            for row in rows:
                history.append({
                    'id': row[0],
                    'timestamp': row[1],
                    'role': row[2],
                    'message': row[3],
                    'emotion': row[4],
                    'context': row[5],
                    'session_id': row[6]
                })
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            return list(reversed(history))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å ID: {e}")
            return []
    
    def clear_old_messages(self, days_old: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cutoff_date = datetime.now().replace(day=datetime.now().day - days_old)
            
            cursor.execute('''
                DELETE FROM conversations 
                WHERE timestamp < ?
            ''', (cutoff_date.isoformat(),))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏
memory_service = MemoryService()

def get_memory_service() -> MemoryService:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏"""
    return memory_service
