"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: –ø–∞–º—è—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import subprocess
import sys
import time
import os
import threading
import webbrowser
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EssentialServicesManager:
    def __init__(self, services_to_start=None):
        self.base_dir = Path(__file__).parent
        self.processes = {}
        self.running = False
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        (self.base_dir / "logs").mkdir(exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
        if services_to_start is None:
            self.services_to_start = ["memory_service", "main_server"]
        else:
            self.services_to_start = services_to_start
        
        logger.info(f"–°–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {', '.join(self.services_to_start)}")
    
    def start_memory_service(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏"""
        logger.info("üß† –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏...")
        
        try:
            script_path = self.base_dir / "services" / "memory_api.py"
            
            with open("logs/memory_service_stdout.log", "w", encoding="utf-8") as out_log, \
                 open("logs/memory_service_stderr.log", "w", encoding="utf-8") as err_log:
                
                process = subprocess.Popen(
                    [sys.executable, str(script_path)],
                    stdout=out_log,
                    stderr=err_log,
                    cwd=str(self.base_dir)
                )
            
            self.processes["memory_service"] = process
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def start_main_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            script_path = self.base_dir / "main_server.py"
            
            with open("logs/main_server_stdout.log", "w", encoding="utf-8") as out_log, \
                 open("logs/main_server_stderr.log", "w", encoding="utf-8") as err_log:
                
                process = subprocess.Popen(
                    [sys.executable, str(script_path)],
                    stdout=out_log,
                    stderr=err_log,
                    cwd=str(self.base_dir)
                )
            
            self.processes["main_server"] = process
            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def check_process_health(self, service_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if service_name not in self.processes:
            return False
        
        process = self.processes[service_name]
        return process.poll() is None
    
    def stop_service(self, service_name):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
        if service_name not in self.processes:
            return
        
        try:
            process = self.processes[service_name]
            process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                process.kill()
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω {service_name}")
            
            del self.processes[service_name]
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {service_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {service_name}: {e}")
    
    def stop_all_services(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        for service_name in list(self.processes.keys()):
            self.stop_service(service_name)
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üëÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        while self.running:
            try:
                for service_name in list(self.processes.keys()):
                    if not self.check_process_health(service_name):
                        logger.error(f"‚ùå –°–µ—Ä–≤–∏—Å {service_name} —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        
                        # –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏
                        try:
                            stderr_file = self.base_dir / "logs" / f"{service_name}_stderr.log"
                            if stderr_file.exists():
                                with open(stderr_file, "r", encoding="utf-8") as f:
                                    error_content = f.read().strip()
                                    if error_content:
                                        logger.error(f"–û—à–∏–±–∫–∏ –≤ {service_name}: {error_content[-300:]}")
                        except:
                            pass
                        
                        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                        if service_name == "memory_service":
                            self.start_memory_service()
                        elif service_name == "main_server":
                            self.start_main_server()
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
    
    def open_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        try:
            logger.info("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            webbrowser.open("http://127.0.0.1:8080")
            time.sleep(2)
            webbrowser.open("http://127.0.0.1:8080/memory/viewer")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã VTuber AI")
        logger.info("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ
            for service_name in self.services_to_start:
                if service_name == "memory_service":
                    if not self.start_memory_service():
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}")
                        return
                elif service_name == "main_server":
                    if not self.start_main_server():
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service_name}")
                        self.stop_all_services()
                        return
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service_name} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ")
                
                time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
            self.running = True
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            browser_thread = threading.Thread(target=self.open_browser, daemon=True)
            browser_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor_services()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_all_services()
            logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    services_to_start = None
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--all":
            services_to_start = ["memory_service", "main_server"]
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        elif sys.argv[1] == "--memory-only":
            services_to_start = ["memory_service"]
            logger.info("üß† –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏")
        elif sys.argv[1] == "--help":
            print("üëã –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ VTuber AI")
            print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print("  --all         –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–∞–º—è—Ç—å + –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)")
            print("  --memory-only –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–º—è—Ç–∏")
            print("  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
            print("")
            print("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å --all")
            return
    
    manager = EssentialServicesManager(services_to_start)
    
    try:
        manager.run()
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
